name: Tag & Release

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get latest tag
        id: latest-tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          
      - name: Calculate next version
        id: next-version
        run: |
          LATEST_TAG=${{ steps.latest-tag.outputs.LATEST_TAG }}
          # Remove 'v' prefix if present
          VERSION=${LATEST_TAG#v}
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Create and push tag
        run: |
          NEW_VERSION=${{ steps.next-version.outputs.NEW_VERSION }}
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a $NEW_VERSION -m "Auto-generated tag $NEW_VERSION"
          git push origin $NEW_VERSION
                  
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
        
      - name: Set version variables
        id: version
        run: |
          NEW_VERSION=${{ steps.next-version.outputs.NEW_VERSION }}
          VERSION=${NEW_VERSION#v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "TAG=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Build binaries
        run: |
          mkdir -p dist
          
          # Build for macOS (Intel)
          GOOS=darwin GOARCH=amd64 go build -ldflags="-X 'deployaja-cli/internal/version.Version=${{ steps.version.outputs.VERSION }}'" -o dist/aja-darwin-amd64 main.go
          
          # Build for macOS (Apple Silicon)
          GOOS=darwin GOARCH=arm64 go build -ldflags="-X 'deployaja-cli/internal/version.Version=${{ steps.version.outputs.VERSION }}'" -o dist/aja-darwin-arm64 main.go
          
          # Build for Linux (x86_64)
          GOOS=linux GOARCH=amd64 go build -ldflags="-X 'deployaja-cli/internal/version.Version=${{ steps.version.outputs.VERSION }}'" -o dist/aja-linux-amd64 main.go
          
          # Build for Linux (ARM64)
          GOOS=linux GOARCH=arm64 go build -ldflags="-X 'deployaja-cli/internal/version.Version=${{ steps.version.outputs.VERSION }}'" -o dist/aja-linux-arm64 main.go
          
          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -ldflags="-X 'deployaja-cli/internal/version.Version=${{ steps.version.outputs.VERSION }}'" -o dist/aja-windows-amd64.exe main.go
      
      - name: Create archives
        run: |
          cd dist
          
          # Create tar.gz for macOS and Linux
          tar -czf aja-darwin-amd64.tar.gz aja-darwin-amd64
          tar -czf aja-darwin-arm64.tar.gz aja-darwin-arm64
          tar -czf aja-linux-amd64.tar.gz aja-linux-amd64
          tar -czf aja-linux-arm64.tar.gz aja-linux-arm64
          
          # Create zip for Windows
          zip aja-windows-amd64.zip aja-windows-amd64.exe
      
      - name: Generate checksums
        run: |
          cd dist
          shasum -a 256 *.tar.gz *.zip > checksums.txt
      
      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.TAG }}
          name: Release ${{ steps.version.outputs.TAG }}
          body: |
            ## Changes in this release
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Installation
            
            ### Homebrew (macOS/Linux)
            ```bash
            brew install deployaja/tap/aja
            ```
            
            ### Manual Installation
            Download the appropriate binary for your platform from the assets below.
            
            ### GitHub Action
            ```yaml
            - name: Deploy with DeployAja
              uses: deployaja/deployaja-cli@${{ steps.version.outputs.TAG }}
              with:
                command: 'deploy'
                api-token: ${{ secrets.DEPLOYAJA_API_TOKEN }}
            ```
          files: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          draft: false
          prerelease: false