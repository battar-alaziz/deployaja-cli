openapi: 3.0.0
info:
  title: DeployAja API
  description: |
    DeployAja API for container deployment with managed dependencies.
    
    ## Authentication
    Most endpoints require JWT authentication via Bearer token in Authorization header.
    
    ## Base URLs
    - Cost API: `https://deployaja.com/api/v1`
    - Main API: `https://deployaja.id/api/v1`
  version: 1.0.0
  contact:
    name: DeployAja Support
    url: https://deployaja.id/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://deployaja.id/api/v1
    description: Production API
  - url: https://deployaja.com/api/v1
    description: Cost Estimation API

paths:
  # Authentication Endpoints
  /check:
    get:
      summary: Check authentication status during login flow
      description: Used by CLI to poll authentication status during browser login
      parameters:
        - name: ses
          in: query
          required: true
          schema:
            type: string
            format: uuid
          description: Session code generated by CLI
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '202':
          description: Authentication pending
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthPendingResponse'
        '400':
          description: Invalid session code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found or expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Cost Estimation
  /cost:
    post:
      summary: Get deployment cost forecast
      description: Calculate estimated costs for deployment including dependencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CostRequest'
      responses:
        '200':
          description: Cost estimation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CostResponse'
        '400':
          description: Invalid deployment configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Dependencies
  /dependencies:
    get:
      summary: Get available dependencies and specifications
      description: List all supported dependencies with versions and pricing
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [postgresql, mysql, redis, rabbitmq, mongodb, elasticsearch, memcached]
          description: Filter by dependency type
      responses:
        '200':
          description: Dependencies list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependenciesResponse'

  # Deployment Management
  /deploy:
    post:
      summary: Deploy application
      description: Deploy application with specified configuration and dependencies
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployRequest'
      responses:
        '200':
          description: Deployment initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployResponse'
        '400':
          description: Invalid deployment configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Insufficient permissions or quota
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /status:
    get:
      summary: Get deployment status
      description: Get status of all deployments or specific deployment
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: Specific deployment name
      responses:
        '200':
          description: Status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /list:
    get:
      summary: List all active deployments
      description: Get list of all deployments for authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Deployments list retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logs/{name}:
    get:
      summary: Get deployment logs
      description: Retrieve logs for specified deployment
      security:
        - bearerAuth: []
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Deployment name
        - name: tail
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
          description: Number of lines to return
        - name: follow
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: Stream logs (WebSocket upgrade)
      responses:
        '200':
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        '101':
          description: Switching to WebSocket for log streaming
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /rollback:
    post:
      summary: Rollback deployment
      description: Rollback deployment to previous version
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      responses:
        '200':
          description: Rollback initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RollbackResponse'
        '400':
          description: Invalid rollback request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /drop:
    post:
      summary: Delete deployment
      description: Delete/destroy deployment and all associated resources
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DropRequest'
      responses:
        '200':
          description: Deletion initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DropResponse'
        '400':
          description: Invalid drop request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Deployment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Environment Management
  /env:
    get:
      summary: Get environment variables
      description: Retrieve all environment variables for user's deployments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Environment variables retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvGetResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update environment variables
      description: Update environment variables (merge with existing)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvUpdateRequest'
      responses:
        '200':
          description: Environment variables updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvUpdateResponse'
        '400':
          description: Invalid environment variables
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    AuthSuccessResponse:
      type: object
      required:
        - status
        - token
      properties:
        status:
          type: string
          enum: [authenticated]
        token:
          type: string
          description: JWT token for API authentication

    AuthPendingResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [pending]

    # Cost Estimation Schemas
    CostRequest:
      type: object
      required:
        - deploymentConfig
      properties:
        deploymentConfig:
          type: string
          format: byte
          description: Base64 encoded deployaja.yaml content

    CostResponse:
      type: object
      required:
        - estimatedCost
        - breakdown
      properties:
        estimatedCost:
          $ref: '#/components/schemas/EstimatedCost'
        breakdown:
          $ref: '#/components/schemas/CostBreakdown'
        dependencyDetails:
          type: array
          items:
            $ref: '#/components/schemas/DependencyCost'

    EstimatedCost:
      type: object
      required:
        - monthly
        - daily
        - currency
      properties:
        monthly:
          type: number
          format: float
          example: 45.50
        daily:
          type: number
          format: float
          example: 1.52
        currency:
          type: string
          example: "USD"

    CostBreakdown:
      type: object
      required:
        - compute
        - storage
        - network
      properties:
        compute:
          type: number
          format: float
          example: 12.00
        storage:
          type: number
          format: float
          example: 2.50
        network:
          type: number
          format: float
          example: 1.00
        dependencies:
          type: object
          additionalProperties:
            type: number
            format: float
          example:
            postgresql: 15.00
            redis: 8.00
            rabbitmq: 7.00

    DependencyCost:
      type: object
      required:
        - name
        - type
        - version
        - monthlyCost
        - specs
      properties:
        name:
          type: string
          example: "postgres"
        type:
          type: string
          example: "postgresql"
        version:
          type: string
          example: "15"
        monthlyCost:
          type: number
          format: float
          example: 15.00
        specs:
          $ref: '#/components/schemas/DependencySpecs'

    DependencySpecs:
      type: object
      properties:
        cpu:
          type: string
          example: "0.5 vCPU"
        memory:
          type: string
          example: "1GB"
        storage:
          type: string
          example: "1GB"

    # Dependencies Schemas
    DependenciesResponse:
      type: object
      required:
        - dependencies
      properties:
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/DependencyInfo'

    DependencyInfo:
      type: object
      required:
        - type
        - name
        - versions
        - defaultVersion
        - pricing
        - specs
      properties:
        type:
          type: string
          example: "postgresql"
        name:
          type: string
          example: "PostgreSQL"
        versions:
          type: array
          items:
            type: string
          example: ["13", "14", "15", "16"]
        defaultVersion:
          type: string
          example: "15"
        pricing:
          $ref: '#/components/schemas/DependencyPricing'
        specs:
          $ref: '#/components/schemas/DependencySpecs'

    DependencyPricing:
      type: object
      required:
        - base
      properties:
        base:
          type: number
          format: float
          example: 15.00
        storage:
          type: number
          format: float
          example: 0.10
          description: Cost per GB per month

    # Deployment Schemas
    DeployRequest:
      type: object
      required:
        - deploymentConfig
      properties:
        deploymentConfig:
          type: string
          format: byte
          description: Base64 encoded deployaja.yaml content
        dryRun:
          type: boolean
          default: false
          description: If true, validate but don't deploy

    DeployResponse:
      type: object
      required:
        - deploymentId
        - status
        - message
      properties:
        deploymentId:
          type: string
          example: "dep_abc123"
        status:
          type: string
          enum: [deploying, deployed, failed]
          example: "deploying"
        message:
          type: string
          example: "Deployment initiated successfully"
        estimatedTime:
          type: string
          example: "2-3 minutes"
        url:
          type: string
          format: uri
          example: "https://my-app.deployaja.id"

    StatusResponse:
      type: object
      required:
        - deployments
      properties:
        deployments:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentStatus'

    DeploymentStatus:
      type: object
      required:
        - name
        - status
        - replicas
        - lastDeployed
      properties:
        name:
          type: string
          example: "my-app"
        status:
          type: string
          enum: [running, deploying, failed, stopped]
          example: "running"
        replicas:
          $ref: '#/components/schemas/ReplicaStatus'
        url:
          type: string
          format: uri
          example: "https://my-app.deployaja.id"
        lastDeployed:
          type: string
          format: date-time
          example: "2025-06-20T10:30:00Z"
        dependencies:
          type: array
          items:
            $ref: '#/components/schemas/DependencyStatus'

    ReplicaStatus:
      type: object
      required:
        - desired
        - available
      properties:
        desired:
          type: integer
          example: 1
        available:
          type: integer
          example: 1
        ready:
          type: integer
          example: 1

    DependencyStatus:
      type: object
      required:
        - name
        - type
        - status
      properties:
        name:
          type: string
          example: "postgres"
        type:
          type: string
          example: "postgresql"
        status:
          type: string
          enum: [running, starting, failed]
          example: "running"
        version:
          type: string
          example: "15"
        url:
          type: string
          example: "postgres-myapp.deployaja.id:5432"

    ListResponse:
      type: object
      required:
        - deployments
      properties:
        deployments:
          type: array
          items:
            $ref: '#/components/schemas/DeploymentSummary'

    DeploymentSummary:
      type: object
      required:
        - name
        - status
        - createdAt
      properties:
        name:
          type: string
          example: "my-app"
        status:
          type: string
          enum: [running, deploying, failed, stopped]
          example: "running"
        url:
          type: string
          format: uri
          example: "https://my-app.deployaja.id"
        createdAt:
          type: string
          format: date-time
          example: "2025-06-20T10:00:00Z"
        lastDeployed:
          type: string
          format: date-time
          example: "2025-06-20T10:30:00Z"

    # Logs Schemas
    LogsResponse:
      type: object
      required:
        - logs
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'

    LogEntry:
      type: object
      required:
        - timestamp
        - message
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2025-06-20T10:30:00Z"
        level:
          type: string
          enum: [debug, info, warn, error]
          example: "info"
        message:
          type: string
          example: "Server started on port 3000"
        source:
          type: string
          example: "app"
          description: Log source (app, dependency name, etc.)

    # Rollback Schemas
    RollbackRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "my-app"
        version:
          type: string
          example: "previous"
          description: "Version to rollback to, 'previous' for last version"

    RollbackResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [rolling_back, completed, failed]
          example: "rolling_back"
        message:
          type: string
          example: "Rollback initiated"
        targetVersion:
          type: string
          example: "1.2.3"

    # Drop Schemas
    DropRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "my-app"
        force:
          type: boolean
          default: false
          description: Force deletion without confirmation

    DropResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [deleting, deleted, failed]
          example: "deleting"
        message:
          type: string
          example: "Deployment deletion initiated"

    # Environment Schemas
    EnvGetResponse:
      type: object
      required:
        - variables
      properties:
        variables:
          type: object
          additionalProperties:
            type: string
          example:
            NODE_ENV: "production"
            DATABASE_URL: "postgresql://..."
            POSTGRES_URL: "postgresql://..."
            REDIS_URL: "redis://..."

    EnvUpdateRequest:
      type: object
      required:
        - variables
      properties:
        variables:
          type: object
          additionalProperties:
            type: string
          example:
            NODE_ENV: "production"
            NEW_VAR: "new_value"

    EnvUpdateResponse:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: string
          enum: [updated, failed]
          example: "updated"
        message:
          type: string
          example: "Environment variables updated successfully"

    # Error Schema
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Error'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          enum: 
            - UNAUTHORIZED
            - INVALID_CONFIG
            - DEPLOYMENT_NOT_FOUND
            - INSUFFICIENT_QUOTA
            - RATE_LIMITED
            - INTERNAL_ERROR
            - VALIDATION_ERROR
          example: "INVALID_CONFIG"
        message:
          type: string
          example: "Invalid configuration: missing required field 'name'"
        details:
          type: object
          description: Additional error context
        field:
          type: string
          description: Field name for validation errors